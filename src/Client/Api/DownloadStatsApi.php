<?php
/**
 * DownloadStatsApi
 * PHP version 5
 *
 * @category Class
 * @package  Softonic\DownloadStatsApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Download Stats API docs
 *
 * To access the API: 1. Register a client with the proper permissions (`download_stats_api.*`) in the [Softonic OAuth Admin](https://oauth-admin.softonic.com) 1. Retrieve a token for that client with the proper scopes from the [Softonic OAuth API](https://oauth-v2.softonic.com). 1. Copy the token in the input field at the top of the page
 *
 * OpenAPI spec version: 1.67.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Softonic\DownloadStatsApiSdk\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Softonic\DownloadStatsApiSdk\ApiException;
use Softonic\DownloadStatsApiSdk\Configuration;
use Softonic\DownloadStatsApiSdk\HeaderSelector;
use Softonic\DownloadStatsApiSdk\ObjectSerializer;

/**
 * DownloadStatsApi Class Doc Comment
 *
 * @category Class
 * @package  Softonic\DownloadStatsApiSdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DownloadStatsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDownloadStat
     *
     * Retrieves the given downloads statistics
     *
     * @param  int $id Download stats identifier (required)
     *
     * @throws \Softonic\DownloadStatsApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStats
     */
    public function getDownloadStat($id)
    {
        list($response) = $this->getDownloadStatWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getDownloadStatWithHttpInfo
     *
     * Retrieves the given downloads statistics
     *
     * @param  int $id Download stats identifier (required)
     *
     * @throws \Softonic\DownloadStatsApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadStatWithHttpInfo($id)
    {
        $returnType = '\Softonic\DownloadStatsApiSdk\Client\Model\DownloadStats';
        $request = $this->getDownloadStatRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\DownloadStatsApiSdk\Client\Model\DownloadStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDownloadStatAsync
     *
     * Retrieves the given downloads statistics
     *
     * @param  int $id Download stats identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDownloadStatAsync($id)
    {
        return $this->getDownloadStatAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDownloadStatAsyncWithHttpInfo
     *
     * Retrieves the given downloads statistics
     *
     * @param  int $id Download stats identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDownloadStatAsyncWithHttpInfo($id)
    {
        $returnType = '\Softonic\DownloadStatsApiSdk\Client\Model\DownloadStats';
        $request = $this->getDownloadStatRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDownloadStat'
     *
     * @param  int $id Download stats identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDownloadStatRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDownloadStat'
            );
        }

        $resourcePath = '/download-stats/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDownloadStats
     *
     * Get the list of the downloads statistics for a given app
     *
     * @param  string $accept_language Locale (required)
     * @param  string $app_id App id (optional)
     * @param  string $country Country (optional)
     * @param  \DateTime $date Take into account downloads from that date. ISO 8601 format (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $per_page Number of results per page (optional, default to 10)
     *
     * @throws \Softonic\DownloadStatsApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Softonic\DownloadStatsApiSdk\Client\Model\ItemsPaginationModel
     */
    public function getDownloadStats($accept_language, $app_id = null, $country = null, $date = null, $page = '1', $per_page = '10')
    {
        list($response) = $this->getDownloadStatsWithHttpInfo($accept_language, $app_id, $country, $date, $page, $per_page);
        return $response;
    }

    /**
     * Operation getDownloadStatsWithHttpInfo
     *
     * Get the list of the downloads statistics for a given app
     *
     * @param  string $accept_language Locale (required)
     * @param  string $app_id App id (optional)
     * @param  string $country Country (optional)
     * @param  \DateTime $date Take into account downloads from that date. ISO 8601 format (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $per_page Number of results per page (optional, default to 10)
     *
     * @throws \Softonic\DownloadStatsApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Softonic\DownloadStatsApiSdk\Client\Model\ItemsPaginationModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadStatsWithHttpInfo($accept_language, $app_id = null, $country = null, $date = null, $page = '1', $per_page = '10')
    {
        $returnType = '\Softonic\DownloadStatsApiSdk\Client\Model\ItemsPaginationModel';
        $request = $this->getDownloadStatsRequest($accept_language, $app_id, $country, $date, $page, $per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Softonic\DownloadStatsApiSdk\Client\Model\ItemsPaginationModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDownloadStatsAsync
     *
     * Get the list of the downloads statistics for a given app
     *
     * @param  string $accept_language Locale (required)
     * @param  string $app_id App id (optional)
     * @param  string $country Country (optional)
     * @param  \DateTime $date Take into account downloads from that date. ISO 8601 format (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $per_page Number of results per page (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDownloadStatsAsync($accept_language, $app_id = null, $country = null, $date = null, $page = '1', $per_page = '10')
    {
        return $this->getDownloadStatsAsyncWithHttpInfo($accept_language, $app_id, $country, $date, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDownloadStatsAsyncWithHttpInfo
     *
     * Get the list of the downloads statistics for a given app
     *
     * @param  string $accept_language Locale (required)
     * @param  string $app_id App id (optional)
     * @param  string $country Country (optional)
     * @param  \DateTime $date Take into account downloads from that date. ISO 8601 format (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $per_page Number of results per page (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDownloadStatsAsyncWithHttpInfo($accept_language, $app_id = null, $country = null, $date = null, $page = '1', $per_page = '10')
    {
        $returnType = '\Softonic\DownloadStatsApiSdk\Client\Model\ItemsPaginationModel';
        $request = $this->getDownloadStatsRequest($accept_language, $app_id, $country, $date, $page, $per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDownloadStats'
     *
     * @param  string $accept_language Locale (required)
     * @param  string $app_id App id (optional)
     * @param  string $country Country (optional)
     * @param  \DateTime $date Take into account downloads from that date. ISO 8601 format (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $per_page Number of results per page (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDownloadStatsRequest($accept_language, $app_id = null, $country = null, $date = null, $page = '1', $per_page = '10')
    {
        // verify the required parameter 'accept_language' is set
        if ($accept_language === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_language when calling getDownloadStats'
            );
        }
        if ($page !== null && $page > 10) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling DownloadStatsApi.getDownloadStats, must be smaller than or equal to 10.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling DownloadStatsApi.getDownloadStats, must be bigger than or equal to 1.');
        }

        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling DownloadStatsApi.getDownloadStats, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling DownloadStatsApi.getDownloadStats, must be bigger than or equal to 1.');
        }


        $resourcePath = '/download-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($app_id !== null) {
            $queryParams['appId'] = ObjectSerializer::toQueryValue($app_id);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['perPage'] = ObjectSerializer::toQueryValue($per_page);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['accept-language'] = ObjectSerializer::toHeaderValue($accept_language);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postDownloadStats
     *
     * Creates the downloads statistics for a given app
     *
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input download_stats_input (optional)
     *
     * @throws \Softonic\DownloadStatsApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postDownloadStats($accept_language, $download_stats_input = null)
    {
        $this->postDownloadStatsWithHttpInfo($accept_language, $download_stats_input);
    }

    /**
     * Operation postDownloadStatsWithHttpInfo
     *
     * Creates the downloads statistics for a given app
     *
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input (optional)
     *
     * @throws \Softonic\DownloadStatsApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postDownloadStatsWithHttpInfo($accept_language, $download_stats_input = null)
    {
        $returnType = '';
        $request = $this->postDownloadStatsRequest($accept_language, $download_stats_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postDownloadStatsAsync
     *
     * Creates the downloads statistics for a given app
     *
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDownloadStatsAsync($accept_language, $download_stats_input = null)
    {
        return $this->postDownloadStatsAsyncWithHttpInfo($accept_language, $download_stats_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postDownloadStatsAsyncWithHttpInfo
     *
     * Creates the downloads statistics for a given app
     *
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postDownloadStatsAsyncWithHttpInfo($accept_language, $download_stats_input = null)
    {
        $returnType = '';
        $request = $this->postDownloadStatsRequest($accept_language, $download_stats_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postDownloadStats'
     *
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postDownloadStatsRequest($accept_language, $download_stats_input = null)
    {
        // verify the required parameter 'accept_language' is set
        if ($accept_language === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_language when calling postDownloadStats'
            );
        }

        $resourcePath = '/download-stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['accept-language'] = ObjectSerializer::toHeaderValue($accept_language);
        }


        // body params
        $_tempBody = null;
        if (isset($download_stats_input)) {
            $_tempBody = $download_stats_input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putDownloadStats
     *
     * Replaces the given downloads statistics
     *
     * @param  int $id Download stats identifier (required)
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input download_stats_input (optional)
     *
     * @throws \Softonic\DownloadStatsApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putDownloadStats($id, $accept_language, $download_stats_input = null)
    {
        $this->putDownloadStatsWithHttpInfo($id, $accept_language, $download_stats_input);
    }

    /**
     * Operation putDownloadStatsWithHttpInfo
     *
     * Replaces the given downloads statistics
     *
     * @param  int $id Download stats identifier (required)
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input (optional)
     *
     * @throws \Softonic\DownloadStatsApiSdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putDownloadStatsWithHttpInfo($id, $accept_language, $download_stats_input = null)
    {
        $returnType = '';
        $request = $this->putDownloadStatsRequest($id, $accept_language, $download_stats_input);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putDownloadStatsAsync
     *
     * Replaces the given downloads statistics
     *
     * @param  int $id Download stats identifier (required)
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDownloadStatsAsync($id, $accept_language, $download_stats_input = null)
    {
        return $this->putDownloadStatsAsyncWithHttpInfo($id, $accept_language, $download_stats_input)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putDownloadStatsAsyncWithHttpInfo
     *
     * Replaces the given downloads statistics
     *
     * @param  int $id Download stats identifier (required)
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putDownloadStatsAsyncWithHttpInfo($id, $accept_language, $download_stats_input = null)
    {
        $returnType = '';
        $request = $this->putDownloadStatsRequest($id, $accept_language, $download_stats_input);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putDownloadStats'
     *
     * @param  int $id Download stats identifier (required)
     * @param  string $accept_language Locale (required)
     * @param  \Softonic\DownloadStatsApiSdk\Client\Model\DownloadStatsInput $download_stats_input (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putDownloadStatsRequest($id, $accept_language, $download_stats_input = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putDownloadStats'
            );
        }
        // verify the required parameter 'accept_language' is set
        if ($accept_language === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_language when calling putDownloadStats'
            );
        }

        $resourcePath = '/download-stats/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['accept-language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($download_stats_input)) {
            $_tempBody = $download_stats_input;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
